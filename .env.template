### Redis endpoint
REDIS=redis://localhost:6379
# REDIS_PREFIX=y # by default "y:" is prepended to all used redis keys

### flow-websocket server component
# PORT=8001 # The port that is used for listening for websocket connections

### Storage provider
## Either setup Postgres or S3 to persist data. If S3 is set up, then the
## postgres config is not used.

## GCS configuration for fake-gcs-server (start with `npm run fake-gcs-server`)
STORAGE_EMULATOR_HOST=localhost:4443

## S3 configuration for minio (start with `npm run minio`)
S3_ENDPOINT=localhost
S3_PORT=9000
S3_SSL=false
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin

## PostgreSQL connection string format: postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
# POSTGRES=postgres://user:pass@localhost/database
# POSTGRES_TESTDB=yredis_tests ## use a different database for testing


### Logging
## Configure what you want to log. LOG is a regular expression that is applied
## to the logged component.
LOG=* # log everything
# LOG="" # no logging
# LOG="^(yjs|@y)" # Supports regexes
# LOG=@reearth/flow-websocket # print all messages generated by flow-websocket
# LOG=@reearth/flow-websocket/[componentname] - print only messages from a specific flow-websocket component

### Expert configurations
## For debugging purposes and expert use.
## Changing these variables can be very dangerous. The default is carefully
## chosen. Be sure that you know what you are doing!
##
## Redis messages exist for at least one minute on the redis stream
# REDIS_MIN_MESSAGE_LIFETIME=60000
## After this timeout, a worker will pick up a task and clean up a stream.
# REDIS_TASK_DEBOUNCE=10000
