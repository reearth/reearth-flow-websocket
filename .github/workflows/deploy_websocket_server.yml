name: Build and Deploy Websocket
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Build name (e.g., nightly)'
        required: true
        default: 'nightly'
      new_tag:
        description: 'Tag version'
        required: true
        default: 'blank'
      new_tag_short:
        description: 'Short tag version'
        required: true
        default: 'blank'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
      sha: ${{ github.sha }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set variables
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build-websocket:
    name: Build Websocket
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build
        run: npm run dist
        
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocket-artifacts
          path: dist

  build-docker-image:
    name: Build and Push Docker Image
    needs: [setup, build-websocket]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.name != 'blank' || github.event.inputs.new_tag != 'blank' }}
    env:
      IMAGE_NAME: reearth/reearth-flow-websocket
      IMAGE_GCP: us-central1-docker.pkg.dev/reearth-oss/reearth/reearth-flow-websocket
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Websocket Artifacts
        uses: actions/download-artifact@v4
        with:
          name: websocket-artifacts
          path: dist

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Build Options
        id: options
        run: |
          TAG="${{ github.event.inputs.new_tag_short != 'blank' && github.event.inputs.new_tag_short || '' }}"
          NAME="${{ github.event.inputs.name }}"
          SHA="${{ needs.setup.outputs.sha_short }}"

          if [[ -n "$TAG" ]]; then
            PLATFORMS="linux/amd64"
            VERSION="$TAG"
            TAGS="$IMAGE_NAME:$TAG"

            if [[ ! "$TAG" =~ '-' ]]; then
              TAGS+=",${IMAGE_NAME}:${TAG%.*}"
              TAGS+=",${IMAGE_NAME}:${TAG%%.*}"
              TAGS+=",${IMAGE_NAME}:latest"
            fi
          else
            PLATFORMS="linux/amd64"
            VERSION="$SHA"
            TAGS="$IMAGE_NAME:$NAME"
          fi

          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ steps.options.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.options.outputs.version }}
          tags: ${{ steps.options.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Push Docker Image to GCP Artifact Registry
        if: ${{ github.event.inputs.name == 'nightly' }}
        run: |
          docker pull $IMAGE_NAME:${{ github.event.inputs.name }}
          docker tag $IMAGE_NAME:${{ github.event.inputs.name }} $IMAGE_GCP:${{ github.event.inputs.name }}
          docker push $IMAGE_GCP:${{ github.event.inputs.name }}

  deploy-to-cloud-run:
    name: Deploy to Cloud Run (Nightly)
    needs: [setup, build-docker-image]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.name == 'nightly' }}
    env:
      IMAGE: us-central1-docker.pkg.dev/reearth-oss/reearth/reearth-flow-websocket:nightly
      GCP_REGION: us-central1
      CLOUD_RUN_SERVICE: reearth-flow-websocket
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $CLOUD_RUN_SERVICE \
            --image $IMAGE \
            --region $GCP_REGION \
            --platform managed \
            --quiet
